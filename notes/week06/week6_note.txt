#1. 캐럿을 이용한 히스토리 확장
md5sum *.jp | ... | ...

^jp^jpg
<패턴>: s/from_cmd/to_cmd
!!: 


SUMMARY

#1 Programs

<프로그램><옵션><인수>
  - -ch
  - 디렉토리, ...
  - ex) ls -l /usr/passwd

  1) date
    - 날짜와 시간을 표시
  2) who
    - 로그인 한 유저 정보: repl에선 runner
  3) echo
    - echo 뒤의 문자열을 모두 출력
    - 공백 무시
    - 변수는 내용물을 보여줌
  4) ls
    - 파일 디렉토리 조회
    - -l : 한줄씩 더 자세히
      - d...
      - -...
      ...      
    - -a : 숨겨진 파일까지 모두 조회
    - multi column으로 stdout
    - 인수가 디렉토리임
    - 디렉토리가 아닌 파일명을 받으면 그대로 다시 출력
  5) cat 
    - concatenate
    - 여러 파일을 순차적으로 붙여 읽어줌
    - 파일 이어붙이기 가능 (컨텐츠 확장할 때 사용)
  6) wc
    - line, word, char 세기
    - -l, -w, -c
    - 인수가 없으면 stdin으로 받는다
  7) cp
    - copy fromA toB
    - A를 복사해 B로 저장
      - 상대 경로로 쓰는게 편함
      - 같은 파일명일 경우 이름을 안써도 됨
        ex) cp A ./notes
    - 여러 파일 복사 가능
      cp 1 2 3 4 5 6
      1-5 from, 6 to
    Q. runner에서 notes/b를 복사해서 가져오는 코드 작성.
    runner/OSS/notes/b
    A: cp ./OSS/notes/b .
  8) mv
    - move
    - mv fromA toB
    - syntax는 cp와 같음
    - 이름을 변경할 때 주로 사용
      mv a aa // a가 사라지고 aa로 저장됨
    - 디렉토리 A -> B // 복사가 아닌 이동
    - 기존에 존재하는 파일명이라면 덮어쓴다

  9) rm
    - remove
    - 파일명
      - empty
    - -r
    - 여러개 지울 수 있다. 
      rm a b c d
      rm *.txt
    - 확인하고 지울것

  #2 디렉토리 관련 명령
  1) pwd
    - print working directory
      = current directory

  2) cd
    - .. : parent
    - . : current
    Q. notes -> runner 한번에
    A. cd ../..

  3) mkdir
    - make directory

  4) rmdir
    - 디렉토리 삭제
    - empty only

  5) ln
    - link files
    - ln fromA toB
    - a, b
    - 메모리 효율, 항상 함께 동기화함
    - 다른 디렉토리에 동일한 파일을 위치시키고 싶을 때
    - ls -l로 확인 가능함 (숫자가 바뀜)
    - 파일 하나를 삭제해도 다른 파일은 삭제되지 않는다.

#3 패턴매칭
  1) *
    - "*"
    - zero or more
      cat * // 현재 디렉토리에 있는 모든 파일
      chapter* //chapter로 시작하는 모든 파일
    Q. t가 들어가는 모든 파일
    A. *t*
  2) ?
    - 한 개 매칭
      echo ? // 글자 1개로 된 파일 전부
      echo ?? // bb, bb.txt, ...
  3) []
    - 특정 글자 1개 매칭되는 것 전부
    - [abcd] //or
      [02468] //even
      [0-9] //모든 숫자
      [a-z] //모든 소문자
      Q. o를 제외한 모든 소문자
      A. [a-np-z]
         [!o] //except

  4) escape letter
    - 공백, $, ...
    - \
    - 공백이 있는 파일명 사용 시
      cat hello\ world
      cat 'hello world'
      cat "hello world"
    - echo는 예외
    Q. 'who are you?'라는 디렉토리를 새성하고 목록 조회하는 코드
    A. '', "", \

  #4 리다이렉션
    - 입력 <, <<
    - 출력 >
    - 에러 2
      - "" > cp_pattern01

  #5 파이프라인
    - |
    - 표준 입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다
    - A | B | ...
    - "필터": 파이프라인을 사용할 수 있는, 입출력값을 수정할 수 있는 프로그램
      ex) grep, cut, ...

  #6
    - ; - 여러 명령을 한 줄에 쓸 때
      ex) date; pwd

    - 오래 걸리는 명령 백그라운드로 보내기
      - <명령> &
        ex) cat bigdata > file1 &
      - 다른 프로그램 동시에 수행 가능
      - stdin(주의)

    - ps
      - 프로세스 정보 나타냄
      - PID: id-
      - TTY: 터미널 정보
      - time: rnehd tlrks
      - cmd - 프로세스 이름
      - -f: 좀더 자세한 정보


#7 명령2
  1) cut
    - cut <> 파일명
    - -c, -f, -d
    - -c2-5 / -c2,5,6
    - -f: tab으로 구분
    Q. 10번째 글자부터 끝까지
    A. cut -c10-

    - -d<구분자>
      - -d:
        cut -d: -f1 file
      - -d가 없다면 기본적으로 tab

  2) paste
    - cut과 반대
    - 컬럼별로 데이터를 붙임
    - 디폴트는 tab
    - -d<구분자> : 구분자 지정
    - -s : 같은 파일을 수정할 경우
      ex) ' ' -> \t
        $ paste -s -d' ' file 

  3) grep ***중요***
    - grep <패턴> <디렉토리>
    - 패턴에 매칭되는 문자열을 가진 라인 출력
    - 매칭 없으면 아무것도 출력되지 않는다
    - grep Linux * // 파일 내부의 텍스트
      .... | grep Linux //출력에서 받은 입력값
    Q. 전체 파일에서 *패턴 가진 것 찾기
    A. grep \* * //shell에서 실행 안됨. 어떻게 바꿔야 할까?

    => 패턴은 ''를 사용하는게 좋다
      [a-z]
      ^, $
      ^[A-Z]*
      *.txt$

    - -i : 대소문자 구분 안함
    - -w : 정확한 매칭만
    - -v : 반대, 포함 안되는
    - -l : 해당 매칭이 있는 파일명
    - -n : 라인 넘버 같이 출력
    
    Q. 해당 매칭이 있는 파일 개수
    A. grep -l 'A' * | wc -l

  4) sort
    - 정렬
    - 라인별로, 오름차순 디폴트
    - -r : 내림차순
    - -n : 숫자로 인식
      - 셸은 모든 인수를 문자열로 인식한다. 
        str: 1, 11, 2, 3
        int: 1, 2, 3, 11
    - 특수문자, 다른 언어 중에 특수 기호 사용하는 문자 정렬 순서 주의 
    - ' ' # 32, \
    - -u : sort + uniq
    - -o 
      - sort file1 > file1 (x)
      - 정렬된 결과물을 같은 파일에 저장

  5) uniq
    - 중복 삭제
    - 인접한 것만 고려한다
    - -d: 결과중 중복된 것 삭제
      uniq -d == sort -u
    - -c : 중복 횟수 카운트

  6) tr
    - tr from_char to_char
    - tr e x < input
    - stdin만 가능
    Q. animals.txt에서  
      e -> x
      소문자 -> 대문자 : tr '[a-z]' '[A-Z]' < animals.txt
    - -d : 삭제




    
       

