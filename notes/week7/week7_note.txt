목차
- 정규표현식
- grep
- ed
- *** sed ***

#1. 정규표현식
- 와일드카드와 혼동 주의
  - 와일드카드는 파일이나 디렉토리의 이름에서 매칭을 시도할 때 사용됨
  - 정규표현식은 파일 내부의 내용에서 매칭을 시도할 때 사용됨
- 패턴 매칭할 때 사용

  1) 마침표
    - any single character
    - r. : ro, rk, rc, ...
    - .x. : xxx, oxo, ...
    - [a-zA-Z]

  2) ^ (caret)
    - 라인의 처음
    - [^] : not
    - [^a-z] : "소문자가 아닌"

  3) $ (dollar)
    - 라인의 끝
    - ^ $ : "빈 줄"

  4) [리스트]
    - [a-z]
    - [a-np-z] : o를 제외한 소문자
    - [a-n][p-z]
    - grep '[Tt]he' animals.txt
    - grep -i 'the' animals.txt

  5) *
    - zero or more
    - X* : X............
    - 앞글자 한정
    Q. x로 시작하는 단어
    A. xx*

  6) \+
    - 1개 이상 
      x\+
      
  7) \?
    - zero or one

  8) \{i,j\}
    - j :
    - i,
    - ,j
    - x\{10\} //10번
    - x\{1-10\}
    - x\{10,\}

  9) \(regex\)
    - back referncing이 가능하다.
    - '^\(.\)\1' : 동일한 알파벳 2개로 시작하는 라인 aa..., ll...
    - '^\(a\)\(b\)\2\1' : abba...

  10) regex1 \| regex2
    - regex1 or regex2

Quiz
  1. a-f까지 매칭 -> grep [a-f]
  2. b나 ab 매칭 -> grep "a*b"
  3. 2번 + aaaaab 매칭 -> grep "a\{0,\}b"
  4. 모든 글자 매칭 -> grep '^'
  5. #으로 시작하는 문장 매칭 -> grep "^#"
  6. \로 끝나는 문장 매칭 -> grep '\\$' ; 정규표현식의 ''은 기능을 해제하지 않는다. '\\$'은 \가 \의 기능을 지우고 $의 기능은 살아있기 때문에 grep 가능
  7. 대문자로 시작하지 않는 문장 매칭 -> grep ^[^A-Z]
  8. 빈 줄이 아닌 모든 줄 매칭 -> grep [^'^ $']
  9. cookie나 cake가 포함된 줄 매칭 -> grep 'cookie \| cake '
  10. w. 매칭 -> grep 'w\.'

  ##1. 확장
    [a-zA-Z0-9_] \w
    - \W : not
    - \b : word boundary (앞뒤) h, o
    - \b<regex>\b
        \< 앞
        \> 뒤
    - \B ell
    - \s whitespace (space, tab)
    - \S

#2. ed
  - 텍스트 에디터
  - line-oriented text editor
  - 인터렉티브형
  - ed file
    정규표현식을 넣으면 그 결과가 나오는 상호작용이 가능
  - format: ed file

  - 치환(a -> b)하라
    [address][명령][정규식][flags]
    $ 1,$s/a/b/g  => a를 b로 바꾸어라
      address: 1,$
      명령: s
      정규식: /a/b/
      flags: g ; global(flag)
        g 플래그가 붙으면 패턴과 일치하는 모든 것들을 찾습니다. 
        g 플래그가 없으면 패턴과 일치하는 첫 번째 결과만 반환됩니다.
    프린트 미포함. 별도로 해주어야 함 
    Q. 모음 지우기
    A. 1,$s/[aeiouAEIOU]//g

  - 탈출할 때는 ctrl + d 두 번

#3. sed
  - stream editor
  - 표준 입출력 사용 가능, 파이프라인 사용 가능
  - 인터렉티브 하지 않음
  - 단위: 라인
  Q. python -> PYTHON 변경 후 파일 전체 동일한 이름으로 저장하기
  A. tr python PYTHON < animals.txt > tmp | mv tmp animals.txt
     sed -i 's/python/PYTHON/g' animals.txt
      -i : 스스로에게 저장해 덮어쓰기

  ##1. sed 실행하기
    - format: sed <option> <scrpit> <input_file> # > <output_file>
    Q. file에서 hello -> world
    A. sed 's\hello\world\g' file
       sed 's\hello\world\g' < file
       cat file | sed 's\hello\world'

    1) -i
      - 동일한 파일에 저장한다. (in-place)
      - 임시파일을 따로 저장하고 싶을 때 : -iE ; fileE로 저장됨

    2) -n
      - p와 같이 사용하여 출력 범위를 지정한다
        ex) sed -n '2p' file
      -  5~10줄 출력하기
        sed -n '5,10p' file : ,가 range
      Q. python이 있는 라인만 출력해줘
      A. sed -n '/python/p' animals.txt
      - ;으로 여러 정규식 연결 가능
        sed -n '1p ; $p' file
        sed -n '1p ; $p' fileA fileB fileC
        cat fileA fileB fileC | sed -n '1p ; $p'

    3) -e, -f
      - -e : expression
      - -f : file
        sed -e '1p ; $p' -f file
        - 옵션이 없으면 1번째가 정규표현식, 2번째가 입력파일

   ##2. script
    - format: <address><cmd><options>
      '2p'
        - address: 2
        - cmd: p
      '3d' -> 3번 라인을 지워라
    Q. input파일에서 python으로 시작하는 라인을 삭제하고, hello -> world로 변경한 뒤 out_file에 저장하라. (sed)
    A. sed '/^python/d ; s/hello/world/g' input_file > out_file 
       sed -e '/^python/d -e s/hello/world/g' input_file > out_file 

    연습Quiz
      1) 5번째 줄 삭제 -> sed '5d' 
      2) python, Python 포함 줄 삭제 -> sed '/[p,P]ython/d'
      3) 처음 10개 줄 중 2번 실행 -> sed -n '1,10p ; 2p'
      4) 각 줄에 첫 3글자 삭제
        -> sed -e 's/\(image\).jpg.\([1-3]\)/\1\2.jpg/g' 

      - p, d, s★, q(quit)

  ##3. cmd 's'
    - format: s/regex/'replacement'/flag
    #flag
      - g: global
      - p: 해당 부분 프린트
      - i: 대소문자 구분 없음

    Q. image.jpg.1, image.jpg.2, image.jpg.3을 sed를 이용해 
      image1.jpg, image2.jpg, image3.jpg
      sed 's/\.jpg\.?/?\.jpg/g' (x)
      hint) sed s/\(\)//g

      - s 치환 많이 연습하기

  ##4. address
    - 범위 지정
      '2p'
      sed '160s/a/b/'
      sed '/apple/s/a/b/' : apple이 있는 부분에서 a를 b로
      sed '/apple/!s/a/b/' : apple이 없는 부분에서 a를 b로

      sed '160,200s/a/b/' (범위)
      sed '160,2s/a/b/' : 160만 수행하고 끝

      $
      1,$~2 : step==2

  ##5. 파일로 저장
    - 파일에 커맨드라인 입력
    - 모드 변경한다. 
      chmod +x file
    - 실행
      name 
      ./name
    - 주석은 #
      - 라인 단위